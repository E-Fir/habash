#!/usr/bin/env bash

PROGRAM=$(basename $0)
VERSION="1.1.0"

if [ "${DEBUG}" == "1" ]
then
	set -x
fi

ROOT="${BASH_SOURCE[0]}"
if([ -h "${ROOT}" ]) then
  while([ -h "${ROOT}" ]) do ROOT=`readlink "${ROOT}"`; done
fi
ROOT=$(cd `dirname "${ROOT}"` && pwd)
cd "${ROOT}"

habash_help()
{
	cat <<-HELP
  Usage: habash <command> [command arguments]
      habash up "Floss"
      habash create-todo "Buy milk"

  Contacts Habitica API through cURL with minimal dependencies.

  Commands available (aliases separated with |):
      ls <(optional) TYPE (habits|dailys|todos)>
      partychat
      content # The user should cache this where possible!
      sell <TYPE> <ITEM KEY>
      cast <SPELL NAME> <(optional) TARGET ID>
      id <TASK TEXT>
      up|done <TASK_TEXT>
      down <TASK_TEXT>
      delete <TASK_TEXT>
      create-todo|ct <TASK_TEXT>
      create-habit|ch <TASK_TEXT>

  e.g.
      habash done Use habash on the command line

  Post issues at https://github.com/nasfarley88/habash/issues
	HELP
}

# Usage: hcurl GET tasks/user
hcurl()
{
    local method=$1
    local url_path=$2

    # Basic curl wrapper for habitica
    curl -s \
         -X $method \
         -d "" \
         -H "Content-Type:application/json" \
         -H "x-api-key: $HABITICA_TOKEN" \
         -H "x-api-user: $HABITICA_UUID" \
         https://habitica.com/api/v3/$url_path
}

habash_cast()
{
    if [ -z "$2" ]
    then
        hcurl POST /user/class/cast/$1
    else
        hcurl POST "/user/class/cast/$1?targetId=$2"
    fi
}

habash_sell()
{
    hcurl POST /user/sell/$1/$2
}

habash_content()
{
    hcurl GET /content
}

habash_ls()
{
    if [ "$1" = "dailys" ]; then
        hcurl GET "/tasks/user?type=dailys" | lua habash.lua $@
    elif [ "$1" = "habits" ]; then
        hcurl GET "/tasks/user?type=habits" | grep -Po '(?<="text":").*?(?=")'
    elif [ "$1" = "todos" ]; then
        hcurl GET "/tasks/user?type=todos" | grep -Po '(?<="text":").*?(?=")'
    elif [ "$1" = "tags" ]; then
        hcurl GET "/tags" | lua habash.lua $@
    else
        hcurl GET /tasks/user | grep -Po '(?<="text":").*?(?=")'
    fi
}

habash_partychat()
{
    hcurl GET /groups/party/chat
}

habash_getidoftask()
{
    hcurl GET tasks/user \
		| grep -Po '"text":.*?"id":.*?,' \
		| grep "\"$*\"" \
		| grep -Po '"id":".*?"' \
		| grep -Po '[-a-f0-9]{36}'
}

habash_deletetask()
{
    hcurl DELETE /tasks/$(habash_getidoftask $*)
}

habash_up()
{
  re='^[0-9]+$'
  if ! [[ $1 =~ $re ]] ; then
    ID="$(habash_getidoftask $*)"
    hcurl POST /tasks/$ID/score/up
  else
    IDS="$(lua habash.lua get_task_id_by_pos $@)"
    for i in ${IDS}
    do
      hcurl POST /tasks/$i/score/up | cut -c1-90
    done
  fi
}

habash_down()
{
    hcurl POST /tasks/$(habash_getidoftask $*)/score/down
}

habash_createtodo()
{
    curl -s \
		-H "x-api-key: $HABITICA_TOKEN" \
		-H "x-api-user: $HABITICA_UUID" \
		-H "Content-Type: application/json" \
		-X POST \
		-d "{\"text\": \"$*\", \"type\": \"todo\"}" \
		https://habitica.com/api/v3/tasks/user
}

habash_createhabit()
{
    curl -s \
		-H "x-api-key: $HABITICA_TOKEN" \
		-H "x-api-user: $HABITICA_UUID" \
		-H "Content-Type: application/json" \
		-X POST \
		-d "{\"text\": \"$*\", \"type\": \"habit\"}" \
		https://habitica.com/api/v3/tasks/user
}

# Usage: habash_main <action> [optional arguments]
habash_main()
{
	local action=$1
	shift

	if [ -z "${HABITICA_TOKEN}" ]
	then
		echo "Please, make the following environment variable available: HABITICA_TOKEN" 1>&2
		exit 2
	fi

	if [ -z "${HABITICA_UUID}" ]
	then
		echo "Please, make the following environment variable available: HABITICA_UUID" 1>&2
		exit 2
	fi

	case "${action}" in
    sell)
      habash_sell $@
      ;;
    content)
      habash_content $@
      ;;
		ls)
			habash_ls $@
			;;
		partychat)
			  habash_partychat $@
			  ;;
		cast)
      habash_cast $@
      ;;
		getidoftask|id)
			habash_getidoftask $@
			;;
		ct|create-todo|createtodo|todo)
			habash_createtodo $@
			;;
		deletetask|delete)
			habash_deletetask $@
			;;
		ch|create-habit|createhabit|habit)
			habash_createhabit $@
			;;
		'done'|up)
			habash_up $@
			;;
		down)
			habash_down $@
			;;
		ignore)
			lua habash.lua ignore $@
			;;
		postpone)
			lua habash.lua postpone $@
			;;
		help|-h|--help)
			habash_help
			;;
		*)
			echo "${action} is not a valid action (use'${PROGRAM} help' for more information)."
			exit 2
			;;
	esac
}

habash_main $@
printf "\n"
